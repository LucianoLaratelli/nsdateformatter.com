#set("content") {
  <section class="try panel">
    <form>
      <div class="try__row">
        <div class="field">
          <label>Date Input</label>
          <input id="date" name="date" type="datetime" value="#(exampleDate)">
          <span class="help-text">ISO 8601 format</span>
        </div>

        <div class="field">
          <label>Format String</label>
          <input id="format" name="format" type="text" value="MMM yyyy">
        </div>

        <div class="field field--small">
          <label>Locale</label>
          <select name="locales" id="locale">
            #for(locale in locales) {
              <option #if(locale.isDefault) { selected } value="#(locale.identifier)">#(locale.identifier)</option>
            }
          </select>
        </div>
      </div>
    </form>

    <div class="result-container">
      <label class="result-header">Result</label>
      <h4 id="result">...</h4>
    </div>
  </section>

  <ul class="nav">
    <li><a href="#examples" class="active" data-target=".examples">Examples</a></li>
    <li><a href="#reference" class="" data-target=".reference">Reference</a></li>
    <li><a href="#best-practices" class="" data-target=".best-practices">Best Practices</a></li>
    <li><a href="#about" class="" data-target=".about">About</a></li>
  </ul>

  <section class="info panel">
    <table class="examples toggle table--full-width">
      #for(format in formats) {
        <tr>
          <td class="example">#(format.value)</td>
          <td class="format"><pre>#(format.format)</pre></td>
        </tr>
      }
    </table>

    <div class="reference toggle">
      <p>
        The following table’s sample column are mostly based on the time <code>December 14th, 2008 4:35 PM UTC</code>.
      </p>

      <table class="reference-table table--full-width">
        <tr>
          <th>Characters</th>
          <th>Example</th>
          <th>Description</th>
        </tr>
        <tr class="separator">
          <td colspan="3">Year</td>
        </tr>
        <tr>
          <td>y</td>
          <td>2008</td>
          <td>Year, no padding</td>
        </tr>
        <tr>
          <td>yy</td>
          <td>08</td>
          <td>Year, two digits (padding with a zero if necessary)</td>
        </tr>
        <tr>
          <td>yyyy</td>
          <td>2008</td>
          <td>Year, minimum of four digits (padding with zeros if necessary)</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Quarter</td>
        </tr>
        <tr>
          <td>Q</td>
          <td>4</td>
          <td>The quarter of the year. Use QQ if you want zero padding.</td>
        </tr>
        <tr>
          <td>QQQ</td>
          <td>Q4</td>
          <td>Quarter including "Q"</td>
        </tr>
        <tr>
          <td>QQQQ</td>
          <td>4th quarter</td>
          <td>Quarter spelled out</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Month</td>
        </tr>
        <tr>
          <td>M</td>
          <td>12</td>
          <td>The numeric month of the year.  A single M will use '1' for January.</td>
        </tr>
        <tr>
          <td>MM</td>
          <td>12</td>
          <td>The numeric month of the year.  A double M will use '01' for January.</td>
        </tr>
        <tr>
          <td>MMM</td>
          <td>Dec</td>
          <td>The shorthand name of the month</td>
        </tr>
        <tr>
          <td>MMMM</td>
          <td>December</td>
          <td>Full name of the month</td>
        </tr>
        <tr>
          <td>MMMMM</td>
          <td>D</td>
          <td>Narrow name of the month</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Day</td>
        </tr>
        <tr>
          <td>d</td>
          <td>14</td>
          <td>The day of the month. A single d will use 1 for January 1st.</td>
        </tr>
        <tr>
          <td>dd</td>
          <td>14</td>
          <td>The day of the month. A double d will use 01 for January 1st.</td>
        </tr>
        <tr>
          <td>F</td>
          <td>3rd Tuesday in December</td>
          <td>The day of week in the month</td>
        </tr>
        <tr>
          <td>E</td>
          <td>Tue</td>
          <td>The abbreviation for the day of the week</td>
        </tr>
        <tr>
          <td>EEEE</td>
          <td>Tuesday</td>
          <td>The wide name of the day of the week</td>
        </tr>
        <tr>
          <td>EEEEE</td>
          <td>T</td>
          <td>The narrow day of week</td>
        </tr>
        <tr>
          <td>EEEEEE</td>
          <td>Tu</td>
          <td>The short day of week</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Hour</td>
        </tr>
        <tr>
          <td>h</td>
          <td>4</td>
          <td>The 12-hour hour.</td>
        </tr>
        <tr>
          <td>hh</td>
          <td>04</td>
          <td>The 12-hour hour padding with a zero if there is only 1 digit</td>
        </tr>
        <tr>
          <td>H</td>
          <td>16</td>
          <td>The 24-hour hour.</td>
        </tr>
        <tr>
          <td>HH</td>
          <td>16</td>
          <td>The 24-hour hour padding with a zero if there is only 1 digit.</td>
        </tr>
        <tr>
          <td>a</td>
          <td>PM</td>
          <td>AM / PM for 12-hour time formats</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Minute</td>
        </tr>
        <tr>
          <td>m</td>
          <td>35</td>
          <td>The minute, with no padding for zeroes.</td>
        </tr>
        <tr>
          <td>mm</td>
          <td>35</td>
          <td>The minute with zero padding.</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Second</td>
        </tr>
        <tr>
          <td>s</td>
          <td>8</td>
          <td>The seconds, with no padding for zeroes.</td>
        </tr>
        <tr>
          <td>ss</td>
          <td>08</td>
          <td>The seconds with zero padding.</td>
        </tr>
        <tr>
          <td>SSS</td>
          <td>1234</td>
          <td>The milliseconds.</td>
        </tr>
        <tr class="separator">
          <td colspan="3">Time Zone</td>
        </tr>
        <tr>
          <td>zzz</td>
          <td>CST</td>
          <td>The 3 letter name of the time zone.  Falls back to GMT-08:00 (hour offset) if the name is not known.</td>
        </tr>
        <tr>
          <td>zzzz</td>
          <td>Central Standard Time</td>
          <td>The expanded time zone name, falls back to GMT-08:00 (hour offset) if name is not known.</td>
        </tr>
        <tr>
          <td>ZZZZ</td>
          <td>CST-06:00</td>
          <td>Time zone with abbreviation and offset</td>
        </tr>
        <tr>
          <td>Z</td>
          <td>-0600</td>
          <td>RFC 822 GMT format. Can also match a literal Z for Zulu (UTC) time.</td>
        </tr>
        <tr>
          <td>ZZZZZ</td>
          <td>-06:00</td>
          <td>ISO 8601 time zone format</td>
        </tr>
        <tfoot>
          <tr>
            <td colspan="3">
              For the full reference of available format options, see <a href="http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns" target="_blank">Unicode Technical Reference #35</a>.
            </td>
          </tr>
        </tfoot>
      </table>
    </div> <!-- reference -->

    <div class="best-practices toggle">
        <h2> The main fallacy to be aware of: <tt>dateFormat</tt> is not locale-aware </h2>

        <p>You should be aware that using a custom <tt>dateFormat</tt> comes with a risk of falling into some fallacies.</p>
        <p>
          Especially, you need to realize that the user can use different <tt>Locales</tt>,
          and that date formats are different for different locales, regions and user settings.
          For example one date formatted with a <tt>dateFormat</tt> that fits the US might become confusing anyone in for Europe.
        </p>

        <h2> The TL;DR </h2>
        <ul>
          <li>
            Use <tt>dateStyle</tt> and <tt>timeStyle</tt> over <tt>dateFormat</tt> whenever you can.
            Explain the date fallacies to your designer if you need to.
          </li>
          <li>
            If you can't find a fitting <tt>dateStyle/typeStyle</tt> to format your UI dates, then at least use
            <a href="https://developer.apple.com/documentation/foundation/dateformatter/1417087-setlocalizeddateformatfromtempla">
              <tt>dateFormatter.setLocalizedDateFormatFromTemplate(…)</tt>
            </a> to account for the user's locale.
          </li>
          <li>When parsing ISO8601 internet dates, always use <tt>ISO8601DateFormatter</tt></li>
          <li>
            If you can't because your API format doesn't fit ISO8601 and you still absolutely need to use a custom <tt>dateFormat</tt>,
            then be sure to also set your <tt>dateFormatter.locale</tt> to the special value <tt>Locale(identifier: "en_US_POSIX")</tt>.
          </li>
        </ul>

        <h2> Formatting user-visible dates for your UI </h2>

        <p class="quote">
          Apple already has <a href="https://developer.apple.com/documentation/foundation/dateformatter#1680045">a dedicated paragraph</a>
          in their documentation about best practices for formatting a date to present to the user in a locale-aware way.
          Below is just the TL;DR.
        </p>

        <h3> Using <tt>dateStyle</tt> and <tt>timeStyle</tt> </h3>

        <p>
          The main recommendation to follow is to <strong>prefer using <tt>dateStyle</tt> and <tt>timeStyle</tt>
          over <tt>dateFormat</tt></strong>.
        </p><p>
          This is because those are locale-aware and account for a lot of edge cases
          that you can otherwise miss when using a custom and hardcoded <tt>dateFormat</tt>.
        </p>
        <p>
          I would even advise you to convince your designer against using a custom format and explain them that Date
          and Time is <a href="https://yourcalendricalfallacyis.com/">a tricky subject with lots of edge cases</a>
          and that it's generally not worth using a custom format that might fit their assumptions about the locale
          and region they're used to use but might not fit a lot of other's.
        </p>

        <h3> Using DateFormatter's templating methods to auto-adjust for the user's Locale </h3>

        <p>If you still need to use a custom <tt>dateFormat</tt>, be sure that you use
          <a href="https://developer.apple.com/documentation/foundation/dateformatter/1417087-setlocalizeddateformatfromtempla">
            <tt>dateFormatter.setLocalizedDateFormatFromTemplate(…)</tt>
          </a> or <a href="https://developer.apple.com/documentation/foundation/dateformatter/1408112-dateformat">
            <tt>dateFormatter.dateFormat = DateFormatter.dateFormat(fromTemplate:…options:…locale:…)</tt>
          </a> instead of setting it to a hard-coded <tt>String</tt>.
        </p>

        <h2> Working with ISO8601 dates and fixed formats for APIs </h2>

        <p class="quote">
          Apple Documentation <a href="https://developer.apple.com/documentation/foundation/dateformatter#2528261">
          also has a dedicated section about those cases here</a>.
        </p>

        <h3> Using <tt>ISO8601DateFormatter</tt> </h3>

        <p>
          If you need to parse <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601</a> dates, consider
          using <tt>ISODateFormatter</tt> instead of a <tt>DateFormatter</tt> with a custom <tt>dateFormat</tt>.
        </p>
        <p>
          This class is dedicated to handle the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601</a> standard
          and all its possible variants and edge cases better than using a custom <tt>dateFormat</tt> would.
        </p>
        <p class="quote">
          Tip: One of the little-known options of <tt>ISO8601DateFormatter</tt> is that it is also able to handle
          fractional seconds if you set it up using <tt>formatter.formatOptions.insert(.withFractionalSeconds)</tt>.
        </p>

        <h3> Always use the en_US_POSIX locale for fixed formats </h3>

        <p>
          In last resort, if you need to parse a date for an API that doesn’t fall into ISO8601 format,
          but that also isn’t intended for UI (and should thus <em>not</em> depend on the user’s locale/region/language),
          then that is the only case when you can use a fixed string as a value for <tt>dateFormatter.dateFormat</tt>.
        </p>
        <p>
          <strong>BUT</strong> then <strong>ALWAYS also set</strong> your <tt>dateFormatter.locale</tt> to
          <tt>Locale(identifier: "en_US_POSIX")</tt> on your <tt>DateFormatter</tt>.
        </p>
        <p class="quote">
          <tt>en_US_POSIX</tt> is a special locale that guarantees that the formatting and parsing won’t depend on
          the phone’s locale, and is designed exactly for parsing those “internet dates with fixed format”.
        </p>

        <p>
          If you don't force the locale to <tt>en_US_POSIX</tt>, there are risks that your code might seem to work in some
          regions (like the US), but will fail to parse your API responses if the user has its phone set in another region
          (e.g. <tt>en_GB</tt>, <tt>en_ES</tt> or <tt>fr_FR</tt>), where date formatting is different, or use 12-hour time
          and not 24-hour time.
        </p>
        <p>
          You can test this kind of edge case on device by setting your phone settings to use <tt>en_ES</tt> for example and set
          it to use 12-hour with am/pm, and try to parse a date like <tt>2020-01-15T22:00:00Z</tt>.
        </p>
        <p>
          For more information about those commonly overlooked cases, you can read
          <a href="https://developer.apple.com/library/archive/qa/qa1480/_index.html">Apple's TN1480</a>.
        </p>

        <p class="footnote">This section was contributed by Olivier Halligon</p>
    </div> <!-- best-practices -->

    <div class="about toggle">
      <h2> About this Site </h2>
      <p>
        <strong>nsdateformatter.com</strong> is written with <a href="http://swift.org">Swift</a> 4.2, as
        a means to learn open-source Swift, the Swift Package Manager, and deploying
        to Linux. It uses the <a href="https://vapor.codes" target="_blank">Vapor</a> web application
        framework and deployed is to <a href="https://heroku.com" target="_blank">Heroku</a>.
      </p>

      <p>
        The site is <a href="https://github.com/subdigital/nsdateformatter.com">open source</a>, so if you want to fix a bug or submit an enhancement,
        feel free to submit a pull request.
      </p>

      <h2> About the Author </h2>

      <div class="media">
        <img class="media__avatar" alt="avatar" src="/images/avatar.jpeg" />
        <div class="media__main">
          Ben Scheirman is a developer from Houston, TX. He is the founder of <a href="http://nsscreencast.com">NSScreencast</a>,
          where you can find over 350 screencasts on iOS development topics.
        </div>
      </div>

      <p>You can find Ben on <a href="https://twitter.com/subdigital">Twitter</a> or his <a href="http://benscheirman.com">blog</a>.
    </div> <!-- about -->

  </section>

  <section class="cta">
    <p>
        <strong>Want to see how to use <code>DateFormatter</code> in Swift?</strong>
    </p>
    <div class="cta__box">
      <p>
        Check out this <em>free</em> screencast:
      </p>
      <p>
        <h3>
         <a href="http://nsscreencast.com/episodes/99-parsing-and-formatting-dates">Parsing and Formatting Dates</a>
        </h3>
      </p>
  </section>
}

#embed("base")
